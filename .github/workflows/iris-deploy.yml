name: Iris Deploy

on:
  push:
    branches: [ main, feature/iris-update ]
  pull_request:
    branches: [ main, feature/iris-update ]
  workflow_dispatch: {}

permissions:
  contents: read
  pages: write
  id-token: write

# GitHub Pages requires this
concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      target: ${{ steps.read.outputs.target }}
    steps:
      - uses: actions/checkout@v4
      - id: read
        run: |
          target=pages
          if [ -f .iris/deploy.target ]; then target=$(tr -d "\r\n\t " < .iris/deploy.target); fi
          echo "target=$target" >> "$GITHUB_OUTPUT"

  vercel:
    if: needs.setup.outputs.target == 'vercel'
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - run: npm ci
        # FIXED quoting below
        if: hashFiles('package-lock.json') != ''
      - run: npm run build --if-present
      - run: npm install -g vercel@latest
      - name: Vercel Pull (env)
        run: vercel pull --yes --environment=${{ github.event_name == 'pull_request' && 'preview' || 'production' }} --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      - name: Vercel Build
        run: vercel build ${{ github.event_name == 'pull_request' && '' || '--prod' }} --token=${{ secrets.VERCEL_TOKEN }}
      - name: Vercel Deploy
        run: vercel deploy --prebuilt ${{ github.event_name == 'pull_request' && '' || '--prod' }} --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  pages:
    if: needs.setup.outputs.target == 'pages'
    needs: setup
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v4

      # Detect Node project
      - name: Detect Node project
        id: detect
        run: |
          if [ -f package.json ]; then
            echo "has_node=true" >> $GITHUB_OUTPUT
          else
            echo "has_node=false" >> $GITHUB_OUTPUT
          fi

      - uses: actions/setup-node@v4
        if: steps.detect.outputs.has_node == 'true'
        with: { node-version: 20 }

      - name: Build Next.js (if present)
        if: steps.detect.outputs.has_node == 'true'
        run: |
          npm ci
          if npm run | grep -q -E '(^| )build( |:)'; then
            npm run build
          fi
          if npx --yes next --help >/dev/null 2>&1; then
            npx next export || true
          fi
          mkdir -p out || true

      - name: Create static placeholder (if no Node project)
        if: steps.detect.outputs.has_node == 'false'
        run: |
          mkdir -p out
          cat > out/index.html <<'HTML'
          <!doctype html>
          <html>
          <head><meta charset="utf-8"><title>CookJunkie â€” Placeholder</title></head>
          <body><h1>CookJunkie</h1><p>GitHub Pages placeholder is live.</p></body>
          </html>
          HTML

      - uses: actions/upload-pages-artifact@v3
        with: { path: out }

      - id: deployment
        uses: actions/deploy-pages@v4

  fly:
    if: needs.setup.outputs.target == 'fly'
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Build and deploy
        run: |
          if [ -f Dockerfile ]; then
            flyctl deploy --remote-only --build-arg GIT_SHA=${{ github.sha }}
          else
            echo "No Dockerfile found. Add Dockerfile or set .iris/deploy.target to vercel/pages."
            exit 1
          fi
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
